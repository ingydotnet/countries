--- !yamlscript/v0

ns: sets

climates =::
- Tropical
- Mediterranean
- Desert
- Tundra
- Temperate
- Subarctic
- Savanna
- Alpine
- Oceanic
- Monsoon
- Foggy wet.

planets =::
- Mercury
- Venus
- Earth
- Mars
- Jupiter
- Saturn
- Uranus
- Neptune

ns: main


--- !yamlscript/v0

ns: schemays

defn validate(val checks err='Validation error'):
  checks =: checks:seqable?.if(checks [checks])
  mapv _ checks:
    fn(check):
      when-not check(val):
        die: err
  =>: val

defn mktype(name fns):
  intern NS name:symbol:
    fn(val):
      each f fns:
        f(val) || die("failed $name")
      =>: val

defn mktype-map(name pair):
  intern NS name:symbol:
    fn(map):
      when-not map?(map):
        die: "type '$name' failed - not a map"
      new =:
        loop [[key type] *pair] pair:seq, new map:
          if key.!:
            then: new
            else:
              key opt =:
                if key.ends?('?'):
                  -[key.replace(/\?$/) true]
                   [key false]
              val =: new.$key
              if opt:
                if val:nil?:
                  then:
                    recur: pair new
                  else:
                    type: val
                    recur: pair dissoc(new key)
                if val:nil?:
                  then:
                    die: "missing key '$key'"
                  else:
                    type: val
                    recur: pair dissoc(new key)
      when new.?:
        die: "mapping has unknown keys: ($(new:keys.join(' ')))"
      =>: map



      # die if keys remain in val

defn mklist(name check):
  intern NS name:symbol:
    fn(vals):
      if vals:coll?:
        each val vals:
          call check: val
        else:
          die: "Failed $name. Not a list: $val"

defn mktypes(specs):
  each spec specs:
    ks =: spec:keys
    cond:
      ks.has?('must'): mktype(spec.name spec.must)
      ks.has?('pair'): mktype-map(spec.name spec.pair)
      ks.has?('list'): mklist(spec.name spec.list)
      else: die()

    key val =: spec:first
    foo =: val:first
    if foo:map? && (foo:keys.0 == '-list'):
      then:
        mklist key: foo.get('-list')
      else:
        mktype key: val

ns: main    # XXX



--- !yamlscript/v0

schemays/mktypes::
- name: non-empty-string
  must::
    -[string? comp(not empty?)]
- name: positive-int
  must::
    -[int? gt(0)]
- name: positive-num
  must::
    -[number? gt(0)]


--- !yamlscript/v0

schemays/mktypes::
- name: country
  pair:
    name:: non-empty-string
    area:: positive-num
    population:: positive-int
    incomeTax?:: \(0 <= _ <= 100)
    climate?:: \(_.in?(sets/climates))
    planet?:: \(_.in?(sets/planets))

schemays/mktypes::
- name: countries
  list: country


--- !yamlscript/v0/data

countries: !:countries
# - type: Triangle
#   sides: [3,4,5]

- name: foo
  population: x1000
  area: 42334.11
  climate: Foggy wet.

- name: bar
  population: 2000
  area: 44242
  incomeTax: 55

- name: baz
  population: 100
  area: 1234.432
  planet: Mars
